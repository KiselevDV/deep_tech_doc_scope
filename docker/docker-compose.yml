services:
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000
      "
    volumes:
      - .:/app
    ports:
      - "18000:8000"
    env_file: .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

  postgresql:
    image: postgres:17-alpine
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./DB/postgres/pg_data_deep_tech_doc_scope/:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "16379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A config worker -l info
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  pg_data_deep_tech_doc_scope:

networks:
  app_network:
    driver: bridge