services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: backend_doc_scope
    restart: always
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --config gunicorn.conf.py
      "
    ports:
      - "18000:8000"
    env_file:
      - ../.env
    volumes:
      - ../:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network_doc_scope

  postgres:
    image: postgres:17-alpine
    container_name: postgres_doc_scope
    restart: always
    ports:
      - "15432:5432"
    env_file:
      - ../.env
    volumes:
      - ../../DB/postgres/pg_data_deep_tech_doc_scope/:/var/lib/postgresql/data
    networks:
      - network_doc_scope
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user_doc_scope} -d ${POSTGRES_DB:-db_doc_scope}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis_doc_scope
    restart: always
    ports:
      - "16379:6379"
    networks:
      - network_doc_scope
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: celery_doc_scope
    restart: always
    command: celery -A config worker --loglevel=info
    env_file:
      - ../.env
    volumes:
      - ../:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - network_doc_scope
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: celery_beat_doc_scope
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ../.env
    volumes:
      - ../:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - network_doc_scope
    restart: always
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  pg_data_deep_tech_doc_scope:

networks:
  network_doc_scope:
    driver: bridge